#+title: Org Mode and Source Blocks
#+author: Sean Zhang
#+OPTIONS: html-postamble:nil

* Org Babel
This allows me to run code within Org mode.

** Ray Tracing


* Literate Programming
While reading [[https://www.pbr-book.org/3ed-2018/Introduction/Literate_Programming][Physically Based Rendering]], I came across this section on
literate programming.

** My Projects
I found out about this after I had already finished my first ray tracing project,
and I had already started two others.

My interpretation of this is that you explain pieces of code, which after you
can explain how they come together.

And fortunately, I wrote this all in Org mode, which seems to
[[https://orgmode.org/manual/Extracting-Source-Code.html][support literate programming]].

** Linking Code
To do this, I need a code block and a few header args -
I want to ultimately export the result as a file.

So here are some imports that I may want to explain.
#+name: imports
#+begin_src C++
  // <<imports>>
  #include <iostream>
  #include <vector>
#+end_src


Now that I am done explaining, I'll put it in my very skeleton main function.
I'm concerned that this may get confusing if the document gets long, as users don't really
have indication of the name of the code block. \\
#+name: main-body
#+begin_src C++ :comments both
  <<imports>>

  int main() {
    return 0;
  }
#+end_src


You can also expand it using a ~:noweb yes~ header:
#+name: main-body
#+header: :noweb yes
#+begin_src C++ :comments both
  <<imports>>

  int main() {
    return 0;
  }
#+end_src

